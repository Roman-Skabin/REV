- Core
    - Complete core\platform.h
    - Scene serialization
    - ISA wide CompareMemory // @Optimization
    - Single namespace for everything? (get rid of Math and GPU namespaces)
    - Minimize number of system calls // @Optimization
    - Mesh files

- Tools
    - Wait for multiple events
    - Create StaticString and StaticStringBuilder on arenas
    - Replace std::function in REV::Function
    - Hash table
    - UTF-8 strings?

- Git
    - Custom commit/push scripts with tags checks like Jon's nocheckin

- GPU
    - Review Wait stuff during the frame. I feel like we are waiting to much.
    - Several adapters support? (NVidia has gotten rid of SLI so shall we?)
    - Cross platform shaders? Or just use HLSL and compile it via DXC for different graphics APIs?

- Custom shaders
    - Resource hooks.
    - Hot reload.
    - Smarter includes.

- Graphics
    - static samplers, (constants?)
    - Forward+ Rendering
    - Multisampling
    - Add Root Signature v1.1 specific settings.
    - Support triangle strips.
    - Meshes
    - PBR?
    - SubTextures
    - Entity (component?) system
    - Particle system
    - TextRenderer (DirectWrite + D2D)
    - Maya animation
    - Parse Blender's output files to custom format (static meshes)

- Sound
    - Mixer
    - Create a common audio session for entire program
    - Allow to create more audio streams

- Editor
    - UI (ImGUI or Nuklear or write my own?)
    - Picking and moving object with a mouse.
    - Selecting many entities and moving them as a group.
    - Uniting many "connected/overlapped" entities in one single mesh.

- Other
    - Rewrite sound in C++
    - Some documenting?
