- Core
    - Make engine's user pointer and sandbox thread safety
    - Improve timer: public, name, segmented profiling, output result to... somewhere
    - More significant logs. Have to be almost everywhere, BUT DO NOT TRASH THE CODE!
    - Include all slightly changes files in pch.h
    - Complete core\platform.h
    - BIG ISSUE: Do I really need all these Checks in my code,
                 especially at the beginning of functions?
                 Doesn't it stupid or useless, huh?
    - Edit all CheckM and FailedM calls (now they are able to get __VA_ARGS__)
    - Move all STD includes in platform.h to pch.h?
    - Advanced free list for allocator.
    - Level system (not a "System" actualy but kinda).

- Tools
    - Move improved timer to the tools?
    - Overlapped I/O

- Build
    - [Pre?]build system. Build only edited files
      (source file change time > .obj file change time)?

- Window
    - Switch to DPI stuff for monitor and window adjustment?

- Math
    - Adapt to different ISA vec.h and mat.h

- GPU
    - TODOs in cengine/gpu/gpu_memory_manager.h
    - Clean up GPUMemoryManager and GPUProgramManager
    - Print D3D12/DXGI messages in separate "while true" thread
    - Save shaders bytecode in some files and compile only shaders that
      source file change time > bytecode file change time?
    - Do ResizeGPUBuffers when we choose another screen dimension. (After UI will be implemented)
    - Custom compute shader's parser and ComputeProgram generation
    - User-side GPU command lists and bundles?
    - Several adapters support

- Graphics
    - Custom graphics shader's parser and GraphicsProgram generation
        - SRVs, UAVs, static samplers, tables (, constants?)
        - Hash table for interns
        - Add Root Signature v1.1 specific settings.
        - Includes
        - Parse templates (Buffer<type> name; vector<type, dim> name; ...)
        - Stream output
    - Switch from 1 to 3 Render Targets for OIT
    - Weighted Blended OIT
    - Support triangle strips (define topology in shaders?)
    - Support stream output (define it in shaders too?)
    - SubTextures
    - Entity system
    - Particle system
    - TextRenderer (DirectWrite + D2D)

- Sound
    - Create a common audio session for entire program
    - Allow to create more audio streams
    - Different callbacks for audios and sounds (fx)

- Editor
    - GUI (ImGUI or write my own?)
    - Vertex and index buffer generation.
    - Ability to choose render targets' (framebuffers') dimension.
